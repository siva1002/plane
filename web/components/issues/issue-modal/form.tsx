import React, { FC, useState, useRef, useEffect } from "react";
import { useRouter } from "next/router";
import { observer } from "mobx-react-lite";
import { Controller, useForm } from "react-hook-form";
import { LayoutPanelTop, Sparkle, X } from "lucide-react";
// editor
import { RichTextEditorWithRef } from "@plane/rich-text-editor";
// hooks
import { useApplication, useEstimate, useIssueDetail, useMention, useProject, useWorkspace } from "hooks/store";
import useToast from "hooks/use-toast";
// services
import { AIService } from "services/ai.service";
import { FileService } from "services/file.service";
// components
import { GptAssistantPopover } from "components/core";
import { ParentIssuesListModal } from "components/issues";
import { IssueLabelSelect } from "components/issues/select";
import { CreateLabelModal } from "components/labels";
import {
  CycleDropdown,
  DateDropdown,
  EstimateDropdown,
  ModuleDropdown,
  PriorityDropdown,
  ProjectDropdown,
  ProjectMemberDropdown,
  StateDropdown,
} from "components/dropdowns";
// ui
import { Button, CustomMenu, Input, ToggleSwitch } from "@plane/ui";
// helpers
import { renderFormattedPayloadDate } from "helpers/date-time.helper";
// types
import type { TIssue, ISearchIssueResponse } from "@plane/types";

const defaultValues: Partial<TIssue> = {
  project_id: "",
  name: "",
  description_html: "",
  estimate_point: null,
  state_id: "",
  parent_id: null,
  priority: "none",
  assignee_ids: [],
  label_ids: [],
  cycle_id: null,
  module_id: null,
  start_date: null,
  target_date: null,
};

export interface IssueFormProps {
  data?: Partial<TIssue>;
  isCreateMoreToggleEnabled: boolean;
  onCreateMoreToggleChange: (value: boolean) => void;
  onChange?: (formData: Partial<TIssue> | null) => void;
  onClose: () => void;
  onSubmit: (values: Partial<TIssue>) => Promise<void>;
  projectId: string;
}

// services
const aiService = new AIService();
const fileService = new FileService();

export const IssueFormRoot: FC<IssueFormProps> = observer((props) => {
  const {
    data,
    onChange,
    onClose,
    onSubmit,
    projectId: defaultProjectId,
    isCreateMoreToggleEnabled,
    onCreateMoreToggleChange,
  } = props;
  // states
  const [labelModal, setLabelModal] = useState(false);
  const [parentIssueListModalOpen, setParentIssueListModalOpen] = useState(false);
  const [selectedParentIssue, setSelectedParentIssue] = useState<ISearchIssueResponse | null>(null);
  const [gptAssistantModal, setGptAssistantModal] = useState(false);
  const [iAmFeelingLucky, setIAmFeelingLucky] = useState(false);

  // refs
  const editorRef = useRef<any>(null);
  // router
  const router = useRouter();
  const { workspaceSlug } = router.query;
  const workspaceStore = useWorkspace();
  const workspaceId = workspaceStore.getWorkspaceBySlug(workspaceSlug as string)?.id as string;

  // store hooks
  const {
    config: { envConfig },
  } = useApplication();
  const { getProjectById } = useProject();
  const { areEstimatesEnabledForProject } = useEstimate();
  const { mentionHighlights, mentionSuggestions } = useMention();
  const {
    issue: { getIssueById },
  } = useIssueDetail();
  // toast alert
  const { setToastAlert } = useToast();
  // form info
  const {
    formState: { errors, isDirty, isSubmitting },
    handleSubmit,
    reset,
    watch,
    control,
    getValues,
    setValue,
  } = useForm<TIssue>({
    defaultValues: { ...defaultValues, project_id: defaultProjectId, ...data },
    reValidateMode: "onChange",
  });

  const projectId = watch("project_id");

  //reset few fields on projectId change
  useEffect(() => {
    if (isDirty) {
      const formData = getValues();

      reset({
        ...defaultValues,
        project_id: projectId,
        name: formData.name,
        description_html: formData.description_html,
        priority: formData.priority,
        start_date: formData.start_date,
        target_date: formData.target_date,
        parent_id: formData.parent_id,
      });
    }
  }, [projectId]);

  const issueName = watch("name");

  const handleFormSubmit = async (formData: Partial<TIssue>) => {
    await onSubmit(formData);

    setGptAssistantModal(false);

    reset({
      ...defaultValues,
      project_id: getValues("project_id"),
    });
    editorRef?.current?.clearEditor();
  };

  const handleAiAssistance = async (response: string) => {
    if (!workspaceSlug || !projectId) return;

    setValue("description_html", `${watch("description_html")}<p>${response}</p>`);
    editorRef.current?.setEditorValue(`${watch("description_html")}`);
  };

  const handleAutoGenerateDescription = async () => {
    if (!workspaceSlug || !projectId) return;

    setIAmFeelingLucky(true);

    aiService
      .createGptTask(workspaceSlug.toString(), projectId, {
        prompt: issueName,
        task: "Generate a proper description for this issue.",
      })
      .then((res) => {
        if (res.response === "")
          setToastAlert({
            type: "error",
            title: "Error!",
            message:
              "Issue title isn't informative enough to generate the description. Please try with a different title.",
          });
        else handleAiAssistance(res.response_html);
      })
      .catch((err) => {
        const error = err?.data?.error;

        if (err.status === 429)
          setToastAlert({
            type: "error",
            title: "Error!",
            message: error || "You have reached the maximum number of requests of 50 requests per month per user.",
          });
        else
          setToastAlert({
            type: "error",
            title: "Error!",
            message: error || "Some error occurred. Please try again.",
          });
      })
      .finally(() => setIAmFeelingLucky(false));
  };

  const handleFormChange = () => {
    if (!onChange) return;

    if (isDirty && (watch("name") || watch("description_html"))) onChange(watch());
    else onChange(null);
  };

  const startDate = watch("start_date");
  const targetDate = watch("target_date");

  const minDate = startDate ? new Date(startDate) : null;
  minDate?.setDate(minDate.getDate());

  const maxDate = targetDate ? new Date(targetDate) : null;
  maxDate?.setDate(maxDate.getDate());

  const projectDetails = getProjectById(projectId);

  // executing this useEffect when the parent_id coming from the component prop
  useEffect(() => {
    const parentId = watch("parent_id") || undefined;
    if (!parentId) return;
    if (parentId === selectedParentIssue?.id || selectedParentIssue) return;

    const issue = getIssueById(parentId);
    if (!issue) return;

    const projectDetails = getProjectById(issue.project_id);
    if (!projectDetails) return;

    setSelectedParentIssue({
      id: issue.id,
      name: issue.name,
      project_id: issue.project_id,
      project__identifier: projectDetails.identifier,
      project__name: projectDetails.name,
      sequence_id: issue.sequence_id,
    } as ISearchIssueResponse);
  }, [watch, getIssueById, getProjectById, selectedParentIssue]);

  return (
    <>
      {projectId && (
        <CreateLabelModal
          isOpen={labelModal}
          handleClose={() => setLabelModal(false)}
          projectId={projectId}
          onSuccess={(response) => {
            setValue("label_ids", [...watch("label_ids"), response.id]);
            handleFormChange();
          }}
        />
      )}
      <form onSubmit={handleSubmit(handleFormSubmit)}>
        <div className="space-y-5">
          <div className="flex items-center gap-x-2">
            {/* Don't show project selection if editing an issue */}
            {!data?.id && (
              <Controller
                control={control}
                name="project_id"
                rules={{
                  required: true,
                }}
                render={({ field: { value, onChange } }) => (
                  <div className="h-7">
                    <ProjectDropdown
                      value={value}
                      onChange={(projectId) => {
                        onChange(projectId);
                        handleFormChange();
                      }}
                      buttonVariant="border-with-text"
                      tabIndex={19}
                    />
                  </div>
                )}
              />
            )}
            <h3 className="text-xl font-semibold leading-6 text-custom-text-100">
              {data?.id ? "Update" : "Create"} issue
            </h3>
          </div>
          {watch("parent_id") && selectedParentIssue && (
            <div className="flex w-min items-center gap-2 whitespace-nowrap rounded bg-custom-background-80 p-2 text-xs">
              <div className="flex items-center gap-2">
                <span
                  className="block h-1.5 w-1.5 rounded-full"
                  style={{
                    backgroundColor: selectedParentIssue.state__color,
                  }}
                />
                <span className="flex-shrink-0 text-custom-text-200">
                  {selectedParentIssue.project__identifier}-{selectedParentIssue.sequence_id}
                </span>
                <span className="truncate font-medium">{selectedParentIssue.name.substring(0, 50)}</span>
                <X
                  className="h-3 w-3 cursor-pointer"
                  onClick={() => {
                    setValue("parent_id", null);
                    handleFormChange();
                    setSelectedParentIssue(null);
                  }}
                  tabIndex={20}
                />
              </div>
            </div>
          )}
          <div className="space-y-3">
            <div className="mt-2 space-y-3">
              <Controller
                control={control}
                name="name"
                rules={{
                  required: "Title is required",
                  maxLength: {
                    value: 255,
                    message: "Title should be less than 255 characters",
                  },
                }}
                render={({ field: { value, onChange, ref } }) => (
                  <Input
                    id="name"
                    name="name"
                    type="text"
                    value={value}
                    onChange={(e) => {
                      onChange(e.target.value);
                      handleFormChange();
                    }}
                    ref={ref}
                    hasError={Boolean(errors.name)}
                    placeholder="Issue Title"
                    className="resize-none text-xl w-full"
                    tabIndex={1}
                  />
                )}
              />
              <div className="relative">
                <div className="absolute bottom-3.5 right-3.5 z-10 border-0.5 flex items-center gap-2">
                  {issueName && issueName.trim() !== "" && envConfig?.has_openai_configured && (
                    <button
                      type="button"
                      className={`flex items-center gap-1 rounded px-1.5 py-1 text-xs bg-custom-background-80 ${
                        iAmFeelingLucky ? "cursor-wait" : ""
                      }`}
                      onClick={handleAutoGenerateDescription}
                      disabled={iAmFeelingLucky}
                      tabIndex={3}
                    >
                      {iAmFeelingLucky ? (
                        "Generating response"
                      ) : (
                        <>
                          <Sparkle className="h-3.5 w-3.5" />I{"'"}m feeling lucky
                        </>
                      )}
                    </button>
                  )}
                  {envConfig?.has_openai_configured && (
                    <GptAssistantPopover
                      isOpen={gptAssistantModal}
                      projectId={projectId}
                      handleClose={() => {
                        setGptAssistantModal((prevData) => !prevData);
                        // this is done so that the title do not reset after gpt popover closed
                        reset(getValues());
                      }}
                      onResponse={(response) => {
                        handleAiAssistance(response);
                      }}
                      placement="top-end"
                      button={
                        <button
                          type="button"
                          className="flex items-center gap-1 rounded px-1.5 py-1 text-xs hover:bg-custom-background-90"
                          onClick={() => setGptAssistantModal((prevData) => !prevData)}
                          tabIndex={4}
                        >
                          <Sparkle className="h-4 w-4" />
                          AI
                        </button>
                      }
                    />
                  )}
                </div>
                <Controller
                  name="description_html"
                  control={control}
                  render={({ field: { value, onChange } }) => (
                    <RichTextEditorWithRef
                      cancelUploadImage={fileService.cancelUpload}
                      uploadFile={fileService.getUploadFileFunction(workspaceSlug as string)}
                      deleteFile={fileService.getDeleteImageFunction(workspaceId)}
                      restoreFile={fileService.getRestoreImageFunction(workspaceId)}
                      ref={editorRef}
                      debouncedUpdatesEnabled={false}
                      value={
                        !value || value === "" || (typeof value === "object" && Object.keys(value).length === 0)
                          ? watch("description_html")
                          : value
                      }
                      customClassName="min-h-[7rem] border-custom-border-100"
                      onChange={(description: Object, description_html: string) => {
                        onChange(description_html);
                        handleFormChange();
                      }}
                      mentionHighlights={mentionHighlights}
                      mentionSuggestions={mentionSuggestions}
                      // tabIndex={2}
                    />
                  )}
                />
              </div>
              <div className="flex flex-wrap items-center gap-2">
                <Controller
                  control={control}
                  name="state_id"
                  render={({ field: { value, onChange } }) => (
                    <div className="h-7">
                      <StateDropdown
                        value={value}
                        onChange={(stateId) => {
                          onChange(stateId);
                          handleFormChange();
                        }}
                        projectId={projectId}
                        buttonVariant="border-with-text"
                        tabIndex={6}
                      />
                    </div>
                  )}
                />
                <Controller
                  control={control}
                  name="priority"
                  render={({ field: { value, onChange } }) => (
                    <div className="h-7">
                      <PriorityDropdown
                        value={value}
                        onChange={(priority) => {
                          onChange(priority);
                          handleFormChange();
                        }}
                        buttonVariant="border-with-text"
                        tabIndex={7}
                      />
                    </div>
                  )}
                />
                <Controller
                  control={control}
                  name="assignee_ids"
                  render={({ field: { value, onChange } }) => (
                    <div className="h-7">
                      <ProjectMemberDropdown
                        projectId={projectId}
                        value={value}
                        onChange={(assigneeIds) => {
                          onChange(assigneeIds);
                          handleFormChange();
                        }}
                        buttonVariant={value?.length > 0 ? "transparent-without-text" : "border-with-text"}
                        buttonClassName={value?.length > 0 ? "hover:bg-transparent px-0" : ""}
                        placeholder="Assignees"
                        multiple
                        tabIndex={8}
                      />
                    </div>
                  )}
                />
                <Controller
                  control={control}
                  name="label_ids"
                  render={({ field: { value, onChange } }) => (
                    <div className="h-7">
                      <IssueLabelSelect
                        setIsOpen={setLabelModal}
                        value={value}
                        onChange={(labelIds) => {
                          onChange(labelIds);
                          handleFormChange();
                        }}
                        projectId={projectId}
                        tabIndex={9}
                      />
                    </div>
                  )}
                />
                <Controller
                  control={control}
                  name="start_date"
                  render={({ field: { value, onChange } }) => (
                    <div className="h-7">
                      <DateDropdown
                        value={value}
                        onChange={(date) => {
                          onChange(date ? renderFormattedPayloadDate(date) : null);
                          handleFormChange();
                        }}
                        buttonVariant="border-with-text"
                        placeholder="Start date"
                        maxDate={maxDate ?? undefined}
                        tabIndex={10}
                      />
                    </div>
                  )}
                />
                <Controller
                  control={control}
                  name="target_date"
                  render={({ field: { value, onChange } }) => (
                    <div className="h-7">
                      <DateDropdown
                        value={value}
                        onChange={(date) => {
                          onChange(date ? renderFormattedPayloadDate(date) : null);
                          handleFormChange();
                        }}
                        buttonVariant="border-with-text"
                        placeholder="Due date"
                        minDate={minDate ?? undefined}
                        tabIndex={11}
                      />
                    </div>
                  )}
                />
                {projectDetails?.cycle_view && (
                  <Controller
                    control={control}
                    name="cycle_id"
                    render={({ field: { value, onChange } }) => (
                      <div className="h-7">
                        <CycleDropdown
                          projectId={projectId}
                          onChange={(cycleId) => {
                            onChange(cycleId);
                            handleFormChange();
                          }}
                          value={value}
                          buttonVariant="border-with-text"
                          tabIndex={12}
                        />
                      </div>
                    )}
                  />
                )}
                {projectDetails?.module_view && (
                  <Controller
                    control={control}
                    name="module_id"
                    render={({ field: { value, onChange } }) => (
                      <div className="h-7">
                        <ModuleDropdown
                          projectId={projectId}
                          value={value}
                          onChange={(moduleId) => {
                            onChange(moduleId);
                            handleFormChange();
                          }}
                          buttonVariant="border-with-text"
                          tabIndex={13}
                        />
                      </div>
                    )}
                  />
                )}
                {areEstimatesEnabledForProject(projectId) && (
                  <Controller
                    control={control}
                    name="estimate_point"
                    render={({ field: { value, onChange } }) => (
                      <div className="h-7">
                        <EstimateDropdown
                          value={value}
                          onChange={(estimatePoint) => {
                            onChange(estimatePoint);
                            handleFormChange();
                          }}
                          projectId={projectId}
                          buttonVariant="border-with-text"
                          tabIndex={14}
                        />
                      </div>
                    )}
                  />
                )}
                <CustomMenu
                  customButton={
                    <button
                      type="button"
                      className="flex items-center justify-between gap-1 w-full cursor-pointer rounded border-[0.5px] border-custom-border-300 text-custom-text-200 px-2 py-1 text-xs hover:bg-custom-background-80"
                    >
                      {watch("parent_id") ? (
                        <div className="flex items-center gap-1 text-custom-text-200">
                          <LayoutPanelTop className="h-3 w-3 flex-shrink-0" />
                          <span className="whitespace-nowrap">
                            {selectedParentIssue &&
                              `${selectedParentIssue.project__identifier}-
                                  ${selectedParentIssue.sequence_id}`}
                          </span>
                        </div>
                      ) : (
                        <div className="flex items-center gap-1 text-custom-text-300">
                          <LayoutPanelTop className="h-3 w-3 flex-shrink-0" />
                          <span className="whitespace-nowrap">Add parent</span>
                        </div>
                      )}
                    </button>
                  }
                  placement="bottom-start"
                  tabIndex={15}
                >
                  {watch("parent_id") ? (
                    <>
                      <CustomMenu.MenuItem className="!p-1" onClick={() => setParentIssueListModalOpen(true)}>
                        Change parent issue
                      </CustomMenu.MenuItem>
                      <CustomMenu.MenuItem
                        className="!p-1"
                        onClick={() => {
                          setValue("parent_id", null);
                          handleFormChange();
                        }}
                      >
                        Remove parent issue
                      </CustomMenu.MenuItem>
                    </>
                  ) : (
                    <CustomMenu.MenuItem className="!p-1" onClick={() => setParentIssueListModalOpen(true)}>
                      Select parent Issue
                    </CustomMenu.MenuItem>
                  )}
                </CustomMenu>
                <Controller
                  control={control}
                  name="parent_id"
                  render={({ field: { onChange } }) => (
                    <ParentIssuesListModal
                      isOpen={parentIssueListModalOpen}
                      handleClose={() => setParentIssueListModalOpen(false)}
                      onChange={(issue) => {
                        onChange(issue.id);
                        handleFormChange();
                        setSelectedParentIssue(issue);
                      }}
                      projectId={projectId}
                    />
                  )}
                />
              </div>
            </div>
          </div>
        </div>
        <div className="-mx-5 mt-5 flex items-center justify-between gap-2 border-t border-custom-border-100 px-5 pt-5">
          <div
            className="flex cursor-default items-center gap-1.5"
            onClick={() => onCreateMoreToggleChange(!isCreateMoreToggleEnabled)}
            onKeyDown={(e) => {
              if (e.key === "Enter") onCreateMoreToggleChange(!isCreateMoreToggleEnabled);
            }}
            tabIndex={16}
          >
            <div className="flex cursor-pointer items-center justify-center">
              <ToggleSwitch value={isCreateMoreToggleEnabled} onChange={() => {}} size="sm" />
            </div>
            <span className="text-xs">Create more</span>
          </div>
          <div className="flex items-center gap-2">
            <Button variant="neutral-primary" size="sm" onClick={onClose} tabIndex={17}>
              Discard
            </Button>
            <Button type="submit" variant="primary" size="sm" loading={isSubmitting} tabIndex={18}>
              {data?.id ? (isSubmitting ? "Updating" : "Update issue") : isSubmitting ? "Creating" : "Create issue"}
            </Button>
          </div>
        </div>
      </form>
    </>
  );
});
